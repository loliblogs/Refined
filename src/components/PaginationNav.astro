---
import { DotsThreeIcon, ArrowLeftIcon, ArrowRightIcon } from '@phosphor-icons/react';
import { posix } from 'node:path';

interface Props {
  currentPage: number;
  lastPage: number;  // 必需参数 - 清晰明确
  className?: string;
  prevText?: string;
  nextText?: string;
  baseUrl: string;
}

const {
  currentPage,
  lastPage,
  className = '',
  prevText = '上一页',
  nextText = '下一页',
  baseUrl,
} = Astro.props;

// Only show pagination if there are multiple pages
const showPagination = lastPage > 1;

// 生成页码数组 - Linus式简洁算法
function generatePageNumbers(current: number, total: number): (number | string)[] {
  if (total <= 7) {
    // 页数少，全部显示
    return Array.from({ length: total }, (_, i) => i + 1);
  }

  const pages: (number | string)[] = [];

  // 始终显示第1页
  pages.push(1);

  // 计算显示范围
  if (current <= 3) {
    // 靠近开头：1 2 3 4 5 ... last
    for (let i = 2; i <= 5; i++) {
      pages.push(i);
    }
    pages.push('...');
  } else if (current >= total - 2) {
    // 靠近结尾：1 ... last-4 last-3 last-2 last-1 last
    pages.push('...');
    for (let i = total - 4; i < total; i++) {
      pages.push(i);
    }
  } else {
    // 在中间：1 ... current-1 current current+1 ... last
    pages.push('...');
    for (let i = current - 1; i <= current + 1; i++) {
      pages.push(i);
    }
    pages.push('...');
  }

  // 始终显示最后一页
  pages.push(total);

  return pages;
}

// 构建页码URL
function getPageUrl(page: number): string {
  if (page === 1) return baseUrl;
  return posix.join(baseUrl, 'page', page.toString());
}

const pageNumbers = showPagination ? generatePageNumbers(currentPage, lastPage) : [];
const prevUrl = currentPage === 1 ? undefined : getPageUrl(currentPage - 1);
const nextUrl = currentPage === lastPage ? undefined : getPageUrl(currentPage + 1);
---

{showPagination && (
  <nav class:list={[
    'mt-8 flex items-center justify-center gap-1',
    className,
  ]}
  >
    {/* 上一页按钮 */}
    {prevUrl
      ? (
          <a
            href={prevUrl}
            class={`
              flex items-center rounded px-3 py-2 text-primary transition-colors
              hover:bg-hover
            `}
            aria-label={prevText}
          >
            <ArrowLeftIcon size="1rem" />
            <span class={`
              ml-1 hidden
              sm:inline
            `}
            >
              {prevText}
            </span>
          </a>
        )
      : (
          <span class={`
            flex cursor-not-allowed items-center px-3 py-2 text-muted
          `}
          >
            <ArrowLeftIcon size="1rem" />
            <span class={`
              ml-1 hidden
              sm:inline
            `}
            >
              {prevText}
            </span>
          </span>
        )}

    {/* 页码按钮 */}
    <div class="flex items-center gap-1">
      {pageNumbers.map((pageNum) => {
        if (typeof pageNum === 'string') {
          return (
            <span class="px-2 py-2 text-muted select-none">
              <DotsThreeIcon size="1rem" />
            </span>
          );
        }

        // 现在 TypeScript 知道 pageNum 是 number
        const isActive = pageNum === currentPage;
        const url = getPageUrl(pageNum);

        return isActive
          ? (
              <span class={`
                rounded bg-active px-3 py-2 font-semibold text-primary ring-1
                ring-border select-none
              `}
              >
                {pageNum}
              </span>
            )
          : (
              <a
                href={url}
                class={`
                  rounded px-3 py-2 text-primary transition-colors
                  hover:bg-hover
                `}
                aria-label={`第 ${pageNum} 页`}
              >
                {pageNum}
              </a>
            );
      })}
    </div>

    {/* 下一页按钮 */}
    {nextUrl
      ? (
          <a
            href={nextUrl}
            class={`
              flex items-center rounded px-3 py-2 text-primary transition-colors
              hover:bg-hover
            `}
            aria-label={nextText}
          >
            <span class={`
              mr-1 hidden
              sm:inline
            `}
            >
              {nextText}
            </span>
            <ArrowRightIcon size="1rem" />
          </a>
        )
      : (
          <span class={`
            flex cursor-not-allowed items-center px-3 py-2 text-muted
          `}
          >
            <span class={`
              mr-1 hidden
              sm:inline
            `}
            >
              {nextText}
            </span>
            <ArrowRightIcon size="1rem" />
          </span>
        )}
  </nav>
)}
